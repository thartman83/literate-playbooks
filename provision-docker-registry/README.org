#+TITLE: Provision Docker Registry
#+AUTHOR: Tom Hartman
#+STARTUP: overview
* Table of Contents
:PROPERTIES:
:TOC:      :include all :ignore this
:END:
:CONTENTS:
- [[#general][General]]
  - [[#requirements-and-prerequisites][Requirements and Prerequisites]]
  - [[#usage][Usage]]
- [[#makefile][Makefile]]
- [[#inventory][Inventory]]
- [[#group-variables][Group Variables]]
- [[#playbook-definition][Playbook Definition]]
  - [[#provision][Provision]]
  - [[#unprovision][Unprovision]]
- [[#roles][Roles]]
  - [[#create-namespace][Create Namespace]]
  - [[#create-certificate][Create Certificate]]
  - [[#create-pvc][Create PVC]]
  - [[#deploy-registry][Deploy Registry]]
  - [[#create-service][Create Service]]
  - [[#delete-deployment][Delete deployment]]
  - [[#delete-namespace][Delete namespace]]
:END:
* General
The purpose of this set of playbooks is to install and uninstall a docker-registry on a kubernetes cluster with a dedicated storage space and externally accessible IP address to allow for outside clients the ability to push new docker images into the cluster and be available for deployments.

** Requirements and Prerequisites
The playbook assumes that the inventory list of hosts provided is a controller node within a kubernetes cluster. Additionally the deployment will utilize the following other cluster deployments, specifically longhorn for storage allocation and cert-manager to provide a valid TLS certificate for the docker registry to use. See the Longhorn session of the [[file:~/projects/literate-playbooks/provision-k3s/README.org][Provision k3s playbook]] and the [[file:~/projects/literate-playbooks/provision-cert-manager/README.org][Cert-Manager literate playbook]] for details on the setup and installation of those resources.

** Usage
The playbooks can be invoked on the commandline using the normal ansible-playbook call.

#+begin_src sh
ansible-playbook -i inventory/hosts provision-docker-registry.yml
#+end_src

Additionally, a makefile is available that will both re-tangle this file with any edits and can be run using the make command.

#+begin_src sh
make provision
#+end_src

* Makefile
Define a simple make file that will retangle the readme and rules for running the two playbooks
#+begin_src Makefile :tangle Makefile
ANSIBLE= ansible-playbook
HOSTS= inventory/hosts.ini
EMACS= emacs

.PHONY: tangle provision unprovision

tangle: README.org
	${EMACS} $< --batch --eval '(org-babel-tangle-file "README.org")'

provision: tangle
	${ANSIBLE} -i ${HOSTS} provision-docker-registry.yml

unprovision: tangle
	${ANSIBLE} -i ${HOSTS} unprovision-docker-registry.yml
#+end_src
* Inventory
The expected inventory for this playbook is a single controller for a kubernetes cluster.

#+begin_src init :tangle inventory/hosts.ini
[controllers]
boreas
#+end_src

* Group Variables
Key group variables to note for this playbook are the following:

- docker_reg_service_ip - The IP address that the service will be running on, adjust as needed for your network configuration
- docker_reg_pvc_size: This is the size of the volume that the registry will claim and use for storage for the docker container images. Adjust up or down as needed
- docker_reg_replicas: - number of containers that will be created as part of the deployment. Because this will be primarily used on my private cluster there isn't that big of a need to have multiple registries available to respond to the likely few requests that it will need to respond to so I have set this to 1. Adjust up as needed.
- cert-manager-issuer:  the selector name of the issuer (or cluster issuer) that will provide the registry with a certificate for encrypting https traffic. This will need to match an existing issuer in the cluster.

The remaining variables are primarily for consistent naming and do not have any external or internal requirements.The container port listening on port 5000 is standard for docker registries.

#+begin_src yaml :tangle group_vars/all
docker_reg_label: docker-registry
docker_reg_namespace: docker-registry
docker_reg_pvc_name: docker-registry-pvc
docker_reg_pvc_size: 5Gi
docker_reg_replicas: 1
docker_reg_container_port: 5000
docker_reg_service_name: docker-registry-service
docker_reg_service_ip: 172.17.1.62
cert_manager_issuer: cert-manager-issuer
#+end_src

* Playbook Definition

** Provision

To install the registry the playbook has been broken up into 5 discrete parts. They are

- Creating the namespace for the registry
- Getting a new certificate from the certificate issuer for the namespace
- Create a persistent volume claim from longhorn for the container images
- Add the deployment to the cluster
- Add a service for the deployment listening on the IP address listed in the group_vars

#+begin_src yaml :tangle provision-docker-registry.yml
- name: Install docker registry on the cluster
  hosts: controllers
  roles:
    - role: create-namespace
    - role: create-certificate
    - role: create-pvc
    - role: deploy-registry
    - role: create-service
#+end_src

** Unprovision

Destroying the docker-registry on the cluster is comparatively simpler than deploying it. Needing only two steps:

- Delete the docker-registry deployment
- Delete the namespace

  Deleting the namespace will delete non-pod resources like secrets, certificates and services.
#+begin_src yaml :tangle unprovision-docker-registry.yml
- name: Unprovision the docker registry
  hosts: controllers
  roles:
    - delete-deployment
    - delete-namespace
#+end_src
* Roles
** Create Namespace

Start by creating the namespace for the docker registry. All other cluster actions are performed within this new namespace.

#+begin_src yaml :tangle roles/create-namespace/tasks/main.yml
- name: Create a docker registry namespace
  kubernetes.core.k8s:
    name: "{{ docker_reg_namespace }}"
    api_version: v1
    kind: Namespace
    state: present
#+end_src

** Create Certificate
Request a new certificate from the Issuer or ClusterIssuer depending on how your cluster is set up. In this playbook I am using a ClusterIssuer to keep things simple.

A few notes on the certificate template found during getting the certificate setup properly.

The values found in dnsNames and ipAddresses are what will be added to the certificate as Alt Subject Names, ie: a list of address this certificate can be accessed from. Specifically if you add the ip address of the service to the dnsNames, you will get very confusing error messages when accessing by IP address about the address not being in a list of address that it should be.

#+begin_src yaml :tangle roles/create-certificate/templates/docker-registry-cert.yml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: {{ docker_reg_namespace }}-certificate
  namespace: {{ docker_reg_namespace }}
spec:
  secretName: {{ docker_reg_namespace }}-secret
  commonName: {{ docker_reg_service_ip }}
  dnsNames:
    - "*.{{ docker_reg_namespace }}.svc.cluster.local"
    - "*.{{ docker_reg_namespace }}"
  ipAddresses:
    - "{{ docker_reg_service_ip }}"
  issuerRef:
    name: {{ cert_manager_issuer }}
    kind: ClusterIssuer
#+end_src

Request the certificate by running the template against the cluster.

#+begin_src yaml :tangle roles/create-certificate/tasks/main.yml
- name: Create docker-registry certificate
  k8s:
    definition: "{{ lookup('template', 'templates/docker-registry-cert.yml') }}"
#+end_src

** Create PVC

Request the PVC from longhorn before deploying the cluster with the size defined in the group vars.

#+begin_src yaml :tangle roles/create-pvc/templates/create-pvc.yml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ docker_reg_pvc_name }}
  namespace: {{ docker_reg_namespace }}
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: {{ docker_reg_pvc_size }}
#+end_src

#+begin_src yaml :tangle roles/create-pvc/tasks/main.yml
- name: Create persistent volume for the registry
  k8s:
    definition: "{{ lookup('template', 'templates/create-pvc.yml') | from_yaml }}"
#+end_src

** Deploy Registry

To make sure that the registry serves the correct certificate, it will pass the tls certificate (tls.crt) and the key (tls.key) as environment variables for the containers. The certificates are defined in a secret that is create when the certificate is issued. The two values can be referenced using the `/certs' directory when the secret is mounted.

#+begin_src yaml :tangle roles/deploy-registry/templates/deploy-registry.yml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    run: {{ docker_reg_label }}
  name: {{ docker_reg_label }}
  namespace: {{ docker_reg_namespace }}
spec:
  replicas: {{ docker_reg_replicas }}
  selector:
    matchLabels:
      run: {{ docker_reg_label }}
  template:
    metadata:
      labels:
        run: {{ docker_reg_label }}
        app: {{ docker_reg_label }}
    spec:
      nodeSelector:
        node-type: worker
      containers:
      - name: {{ docker_reg_label }}
        image: registry:2
        ports:
        - containerPort: {{ docker_reg_container_port }}
        volumeMounts:
        - name: docker-registry-secret
          mountPath: "/certs"
          readOnly: true
        - name: registry-data
          mountPath: /var/lib/registry
          subPath: registry
        env:
        - name: REGISTRY_HTTP_TLS_CERTIFICATE
          value: "/certs/tls.crt"
        - name: REGISTRY_HTTP_TLS_KEY
          value: "/certs/tls.key"
      volumes:
      - name: docker-registry-secret
        secret:
          secretName: docker-registry-secret
      - name: registry-data
        persistentVolumeClaim:
          claimName: {{ docker_reg_pvc_name }}
#+end_src

#+begin_src yaml :tangle roles/deploy-registry/tasks/main.yml
- name: Deploy the registry
  k8s:
    definition: "{{ lookup('template', 'templates/deploy-registry.yml') }}"
#+end_src

** Create Service
With the deployment deployed setup a service for the deployment to listen on the ip address provide in the group variables forwarding the 5000 traffic from the deployment to the 5000 port of the service.

#+begin_src yaml :tangle :tangle roles/create-service/templates/registry-service.yml
apiVersion: v1
kind: Service
metadata:
  name: {{ docker_reg_service_name }}
  namespace: {{ docker_reg_namespace }}
  annotations:
    metallb.universe.tf/address-pool: default-pool
spec:
  selector:
    app: {{ docker_reg_label }}
  ports:
  - port: 5000
    targetPort: 5000
  type: LoadBalancer
  loadBalancerIP: {{ docker_reg_service_ip }}
#+end_src

#+begin_src yaml :tangle roles/create-service/tasks/main.yml
- name: Deploy the registry service
  k8s:
    definition: "{{ lookup('template', 'templates/registry-service.yml') | from_yaml }}"
#+end_src

** Delete deployment
Delete the registry deployment which will delete the pods and the associated mounts/pvcs

#+begin_src yaml :tangle roles/delete-deployment/tasks/main.yml
- name: Delete the docker-registry deployment
  k8s:
    name: "{{ docker_reg_label }}"
    api_version: v1
    kind: Deployment
    state: absent
#+end_src

** Delete namespace

Delete the namespace which will clean up the remaining resources

#+begin_src yaml :tangle roles/delete-namespace/tasks/main.yml
- name: Delete the docker registry namespace
  k8s:
    name: "{{ docker_reg_namespace }}"
    api_version: v1
    kind: Namespace
    state: absent
#+end_src
